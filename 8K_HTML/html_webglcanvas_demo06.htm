<!doctype html>
<html>
  <head>
    <title>WebGL Demo</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <script src="sylvester.js" type="text/javascript"></script>
    <script src="glUtils.js" type="text/javascript"></script>
    <script>
    var canvas
    var gl
    var cubeVerticesBuffer
    var cubeVerticesTextureCoordBuffer
    var cubeVerticesIndexBuffer
    var cubeRotation = 0.0
    var lastCubeUpdateTime = 0
    var cubeImage
    var cubeTexture
    var mvMatrix
    var shaderProgram
    var vertexPositionAttribute
    var textureCoordAttribute
    var perspectiveMatrix
    var vertices
    var textureCoordinates
    var cubeVertexIndices
    
    function start() {
    
      canvas = document.getElementById("glcanvas")

      initWebGL(canvas)      // Initialize the GL context

      // Only continue if WebGL is available and working

      if (gl) {
        gl.clearColor(0.12, 0.12, 0.12, 1.0)  // Clear to black, fully opaque
        gl.clearDepth(1.0)                 // Clear everything
        gl.enable(gl.DEPTH_TEST)           // Enable depth testing
        gl.depthFunc(gl.LEQUAL)            // Near things obscure far things

        // Initialize the shaders; this is where all the lighting for the
        // vertices and so forth is established.

        initShaders()

        // Here's where we call the routine that builds all the objects
        // we'll be drawing.

        initBuffers()

        // Next, load and set up the textures we'll be using.

        initTextures()

        // Set up to draw the scene periodically.

        setInterval(drawScene, 1)
      }
    }
    
    function initWebGL(){
      ["experimental-webgl", "webgl","webkit-3d", "moz-webgl"]
      .map(function(w){
          if(gl == null && canvas.getContext(w)){
            gl = canvas.getContext(w)
          }
          return w
        })
      if(gl == null){
        Error("WebGL not supported")
      }
    }
    
    function initBuffers() {
    
      // These coordinates actually render a 3-dimensional
      // cube  The idea is in the future the other 5 sides
      // will be used as image buffers
    
      // Now create an array of vertices for the cube.
      
      vertices = [
        // Front face
        -1.0, -1.0,  1.0,
         1.0, -1.0,  1.0,
         1.0,  1.0,  1.0,
        -1.0,  1.0,  1.0,

        // Back face
        -1.0, -1.0, -1.0,
        -1.0,  1.0, -1.0,
         1.0,  1.0, -1.0,
         1.0, -1.0, -1.0,

        // Top face
        -1.0,  1.0, -1.0,
        -1.0,  1.0,  1.0,
         1.0,  1.0,  1.0,
         1.0,  1.0, -1.0,

        // Bottom face
        -1.0, -1.0, -1.0,
         1.0, -1.0, -1.0,
         1.0, -1.0,  1.0,
        -1.0, -1.0,  1.0,

        // Right face
         1.0, -1.0, -1.0,
         1.0,  1.0, -1.0,
         1.0,  1.0,  1.0,
         1.0, -1.0,  1.0,

        // Left face
        -1.0, -1.0, -1.0,
        -1.0, -1.0,  1.0,
        -1.0,  1.0,  1.0,
        -1.0,  1.0, -1.0,
      ]

      cubeVerticesBuffer = gl.createBuffer()
      
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesBuffer)
      
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)

      textureCoordinates = [
        // Front
        0.0,  1.0,
        1.0,  1.0,
        1.0,  0.0,
        0.0,  0.0,
        // Back
        0.0,  1.0,
        1.0,  1.0,
        1.0,  0.0,
        0.0,  0.0,
        // Top
        0.0,  1.0,
        1.0,  1.0,
        1.0,  0.0,
        0.0,  0.0,
        // Bottom
        0.0,  1.0,
        1.0,  1.0,
        1.0,  0.0,
        0.0,  0.0,
        // Right
        0.0,  1.0,
        1.0,  1.0,
        1.0,  0.0,
        0.0,  0.0,
        // Left
        0.0,  1.0,
        1.0,  1.0,
        1.0,  0.0,
        0.0,  0.0,
      ]

      // Map the texture onto the cube's faces.

      cubeVerticesTextureCoordBuffer = gl.createBuffer()
      
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesTextureCoordBuffer)
      
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)
      
      // This array defines each face as two triangles, using the
      // indices into the vertex array to specify each triangle's
      // position.

      cubeVertexIndices = [
        0,  1,  2,      0,  2,  3,    // front
        4,  5,  6,      4,  6,  7,    // back
        8,  9,  10,     8,  10, 11,   // top
        12, 13, 14,     12, 14, 15,   // bottom
        16, 17, 18,     16, 18, 19,   // right
        20, 21, 22,     20, 22, 23,   // left
      ]

      // Build the element array buffer; this specifies the indices
      // into the vertex array for each face's vertices.

      cubeVerticesIndexBuffer = gl.createBuffer()
      
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVerticesIndexBuffer)

      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW)
    }
    
    function initTextures() {
      cubeTexture = gl.createTexture()
      cubeImage = new Image()
      cubeImage.onload = function() { handleTextureLoaded(cubeImage, cubeTexture) }
      cubeImage.src = "cubetexture2.png"
    }

    function handleTextureLoaded(image, texture) {
      console.log("handleTextureLoaded, image = " + image)
      gl.bindTexture(gl.TEXTURE_2D, texture)
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)
    }
    
    function drawScene() {
      
      // Clear the canvas before we start drawing on it.

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

      // Establish the perspective with which we want to view the
      // scene. Our field of view uses a 23 zoomFactor, with a 
      // width/height or canvas ratio of 1, and we only want to see 
      // objects between 0.1 units and 100 units away from the camera.

      perspectiveMatrix = makePerspective(23, 1, 0.1, 100.0)
      //makePerspective(34, canvas.width/canvas.height, 0.1, 100.0)

      // Set the drawing position to the "identity" point, which is
      // the center of the scene.

      loadIdentity()

      // Now move the drawing position a bit to where we want to start
      // drawing the cube.

      mvTranslate([-0.0, 0.0, -6.0])

      // Save the current matrix, then rotate before we draw.

      mvPushMatrix()
      mvRotate(cubeRotation, [1, 0, 1])

      // Draw the cube by binding the array buffer to the cube's vertices
      // array, setting attributes, and pushing it to GL.

      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesBuffer)
      gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0)

      // Set the texture coordinates attribute for the vertices.

      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVerticesTextureCoordBuffer)
      gl.vertexAttribPointer(textureCoordAttribute, 2, gl.FLOAT, false, 0, 0)

      // Specify the texture to map onto the faces.

      gl.activeTexture(gl.TEXTURE0)
      gl.bindTexture(gl.TEXTURE_2D, cubeTexture)
      gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0)

      // Draw the cube.
      setMatrixUniforms()
      //gl.viewport(0,0,canvas.width,canvas.height)
      gl.drawElements(gl.TRIANGLES, cubeVertexIndices.length, gl.UNSIGNED_SHORT, 0)

      // Restore the original matrix

      mvPopMatrix()

      // Update the rotation for the next draw, if it's time to do so.

      var currentTime = (new Date).getTime()
      if (lastCubeUpdateTime) {
        var delta = 0 //currentTime - lastCubeUpdateTime

        cubeRotation += (30 * delta) / 1000.0
      }

      lastCubeUpdateTime = currentTime
    }
    
    function initShaders() {
    
      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)
      
      var fragmentSource = 
        "varying highp vec2 vTextureCoord;"+
        "uniform sampler2D uSampler;"+
        "void main(void) {"+
        "  gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));"+
        "}"
     // Send the source to the shader object

      gl.shaderSource(fragmentShader, fragmentSource)

      // Compile the shader program

      gl.compileShader(fragmentShader)

      // See if it compiled successfully

      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        Error("An error occurred compiling the shader: " + gl.getShaderInfoLog(fragmentShader))
        return null
      }
      
      var vertexShader = gl.createShader(gl.VERTEX_SHADER)
      
      var vertexSource = 
        "attribute vec3 aVertexPosition;"+
        "attribute vec2 aTextureCoord;"+
        "uniform mat4 uMVMatrix;"+
        "uniform mat4 uPMatrix;"+
        "varying highp vec2 vTextureCoord;"+
        "void main(void) {"+
        "  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);"+
        "  vTextureCoord = aTextureCoord;"+
        "}"

     // Send the source to the shader object

      gl.shaderSource(vertexShader, vertexSource)

      // Compile the shader program

      gl.compileShader(vertexShader)

      // See if it compiled successfully

      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        Error("An error occurred compiling the shaders: " + gl.getShaderInfoLog(vertexShader))
        return null
      }
      // Create the shader program

      shaderProgram = gl.createProgram()
      gl.attachShader(shaderProgram, vertexShader)
      gl.attachShader(shaderProgram, fragmentShader)
      gl.linkProgram(shaderProgram)

      // If creating the shader program failed

      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        Error("Unable to initialize the shader program: " + gl.getProgramInfoLog(shaderProgram))
      }

      gl.useProgram(shaderProgram)

      vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition")
      gl.enableVertexAttribArray(vertexPositionAttribute)

      textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord")
      gl.enableVertexAttribArray(textureCoordAttribute)
    }
    
    function loadIdentity() {
      mvMatrix = Matrix.I(4)
    }

    function multMatrix(m) {
      mvMatrix = mvMatrix.x(m)
    }

    function mvTranslate(v) {
      multMatrix(Matrix.Translation($V([v[0], v[1], v[2]])).ensure4x4())
    }

    function setMatrixUniforms() {
      var pUniform = gl.getUniformLocation(shaderProgram, "uPMatrix")
      gl.uniformMatrix4fv(pUniform, false, new Float32Array(perspectiveMatrix.flatten()))

      var mvUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix")
      gl.uniformMatrix4fv(mvUniform, false, new Float32Array(mvMatrix.flatten()))
    }

    var mvMatrixStack = []

    function mvPushMatrix(m) {
      if (m) {
        mvMatrixStack.push(m.dup())
        mvMatrix = m.dup()
      } else {
        mvMatrixStack.push(mvMatrix.dup())
      }
    }

    function mvPopMatrix() {
      if (!mvMatrixStack.length) {
        throw("Can't pop from an empty matrix stack.")
      }

      mvMatrix = mvMatrixStack.pop()
      return mvMatrix
    }

    function mvRotate(angle, v) {
      var inRadians = angle * Math.PI / 180.0
      var m = Matrix.Rotation(inRadians, $V([v[0], v[1], v[2]])).ensure4x4()
      multMatrix(m)
    }
    </script>
  </head>
  <body onload="start()">
    <canvas id="glcanvas" width="1024" height="512">
      Your browser doesn't appear to support the <code>&lt;canvas&gt;</code> element.
    </canvas>
  </body>
</html>
