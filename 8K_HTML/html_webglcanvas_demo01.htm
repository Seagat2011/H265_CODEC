<html>
<head>
<title>WebGL Canvas Demo 3.0.0.0</title>
<meta charset="utf-8">
<style>
a {
  font-family: cantarell;
  font-size: 14px; 
  padding: 20px;
}
#canvas_element {
  width: 960; 
  height: 480;
  float: left; 
  position: relative;
  background-color: #202020;
}
.c1 {
  float: left; 
  position: relative;
}
.c2 {
  z-index: 100; 
  position: absolute; 
  bottom: 0px; 
  background-color: rgba(0,0,0,0.25); 
  height: 15px; 
  width: 100%; 
  text-align: left;
}
.c3 {
  font-size: 10px; 
  //font-weight: bold;
  color: #6e6e6e; 
  height: 15px;
}
</style>
<script src="sylvester.js" type="text/javascript"></script>
<script src="glUtils.js" type="text/javascript"></script>
</head>
<body>
<br>
<a style="font-size: 24px;">HTML5 CANVAS</a>
<br>
<a>WebGL Demo</a>
<br><br>
<a>
<input id=btnPlay type=button value=Play onclick="play()"/>
<input id=btnStream type=file />
</a>
<br><br>
<div class=c1>
<div class=c2>
<div class=c3>Click canvas to load and play - worker thread - webgl: true - fps <container id=fps_relay>0</container> - <container id=status_text>Ready</container>
</div>
</div>
<canvas id=canvas_element></canvas>
</div>
<br><br>
</body>
<footer>
<script type="text/javascript">

// WebGL Steps
//  Step1: Prepare the canvas and get WebGL context  
//  Step2: Define the geometry and store it in buffer objects 
//  Step3: Create and compile Shader programs 
//  Step4: Associate the shader programs to buffer objects 
//  Step5: Draw the object 
//
//  About v03: FPS: 12 (-1)
//  + OOP
//  + gl.createTexture()
//  + new Image()
//  gl.drawArrays() => gl.drawElements() (more complex shapes can be created)
function _webglcanvas(canvas){
  var self = this
  this.canvas = canvas
  this.width = canvas.width
  this.height = canvas.height
  this.Step5 = function(){ // 5. draw the object
    console.log("_webglcanvas::drawScene")
    var elapsed = new Date().getTime()   
    var gl = self.gl
    gl.clearColor(0.13,0.13,0.13,1)
    gl.enable(gl.DEPTH_TEST)
    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT)
    gl.viewport(0,0,self.width,self.height)
    gl.drawArrays(gl.TRIANGLES,0,3)
    fps_relay.textContent = ((new Date().getTime()-elapsed)/2)
  } 
  this.Step4 = function(){ // 4. associate shaders with buffers
    console.log("_webglcanvas::initBuffers")
    var gl = this.gl
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertex_buffer)
    gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.vertices),gl.STATIC_DRAW)
    this.coord = gl.getAttribLocation(this.shaderProgram,"coordinates")
    gl.vertexAttribPointer(this.coord,2,gl.FLOAT,false,0,0)
    gl.enableVertexAttribArray(this.coord)
  }
  this.Step3 = function(){ // 3. create and compile shaders
    console.log("_webglcanvas::initShaders")
    var gl = this.gl
    gl.shaderSource(this.vertexShader,this.vertexCode)
    gl.shaderSource(this.fragmentShader,this.fragmentCode)
    gl.compileShader(this.vertexShader)   
    if(!gl.getShaderParameter(this.vertexShader,gl.COMPILE_STATUS)){
      console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(this.vertexShader))
    }  
    gl.compileShader(this.fragmentShader)   
    if(!gl.getShaderParameter(this.fragmentShader,gl.COMPILE_STATUS)){
      console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(this.fragmentShader))
    }    
    this.shaderProgram = gl.createProgram()
    gl.attachShader(this.shaderProgram,this.vertexShader)
    gl.attachShader(this.shaderProgram,this.fragmentShader)
    gl.linkProgram(this.shaderProgram)   
    if(!gl.getProgramParameter(this.shaderProgram,gl.LINK_STATUS)){
      console.log('GPU Program failed to compile: ' + gl.getProgramInfoLog(this.shaderProgram))
    }  
    gl.useProgram(this.shaderProgram)
  }
  this.Step2 = function(){ // 2. define the geometry
    console.log("_webglcanvas::initGeometry")
    var gl = this.gl
    this.vertices = [-0.5,0.5, -0.5,-0.5, 0.0,-0.5,] // range (-1,1)
    this.vertexCode = 
      "attribute vec2 coordinates;"+
      "void main(void){"+
      "gl_Position = vec4(coordinates,0.0,1.0);"+
      "}"
    this.fragmentCode = 
      "void main(void){"+
      "gl_FragColor = vec4(0.0, 0.0, 1.0, 1);"+
      "}"
    this.vertex_buffer = gl.createBuffer()
    this.vertexShader = gl.createShader(gl.VERTEX_SHADER)
    this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)
  }
  this.Step1 = function(){ // 1. prepare the canvas
    console.log("_webglcanvas::initCanvas")
    var gl
    ["experimental-webgl", "webgl","webkit-3d", "moz-webgl"]
    .map(function(w){
        if(gl == null && canvas_element.getContext(w)){
          gl = canvas_element.getContext(w)
        }
        return w
      })
    if(gl){
      this.gl = gl
    }
    else{
      Error("WebGL not supported")
    }
  }
  this.init = function(){
    console.log("_webglcanvas::init")
    this.Step1()
    this.Step2()
    this.Step3()
    this.Step4()
    setInterval(self.Step5,1)
  }
}_webglcanvas.protoype = {}
webglcanvas = new _webglcanvas(canvas_element)
webglcanvas.init()

</script>
</footer>
</html>