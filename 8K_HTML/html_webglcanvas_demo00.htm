<html>
<head>
<title>WebGL Canvas Demo 1.0.0.0</title>
<meta charset="utf-8">
<style>
a {
  font-family: cantarell;
  font-size: 14px; 
  padding: 20px;
}
#canvas_element {
  width: 960; 
  height: 480;
  float: left; 
  position: relative;
  background-color: #202020;
}
.c1 {
  float: left; 
  position: relative;
}
.c2 {
  z-index: 100; 
  position: absolute; 
  bottom: 0px; 
  background-color: rgba(0,0,0,0.25); 
  height: 15px; 
  width: 100%; 
  text-align: left;
}
.c3 {
  font-size: 10px; 
  //font-weight: bold;
  color: #6e6e6e; 
  height: 15px;
}
</style>
</head>
<body>
<br>
<a style="font-size: 24px;">HTML5 CANVAS</a>
<br>
<a>WebGL Demo</a>
<br><br>
<a>
<input id=btnPlay type=button value=Play onclick="play()"/>
<input id=btnStream type=file />
</a>
<br><br>
<div class=c1>
<div class=c2>
<div class=c3>Click canvas to load and play - worker thread - webgl: true - fps <container id=fps_relay>0</container> - <container id=status_text>Ready</container>
</div>
</div>
<canvas id=canvas_element></canvas>
</div>
<br><br>
</body>
<footer>
<script type="text/javascript">

// WebGL Steps
//  Step1: Prepare the canvas and get WebGL context  
//  Step2: Define the geometry and store it in buffer objects 
//  Step3: Create and compile Shader programs 
//  Step4: Associate the shader programs to buffer objects 
//  Step5: Draw the object 
//
//  About: FPS: 11 (baseline)
function main(){ 
  // 1. prepare the canvas
  var gl = canvas_element.getContext('experimental-webgl')
  if(gl){
    // 2. define the geometry
    var vertices = [-0.5,0.5, -0.5,-0.5, 0.0,-0.5,] // range (-1,1)
    var vertexCode = 
      "attribute vec2 coordinates;"+
      "void main(void){"+
      "gl_Position = vec4(coordinates,0.0,1.0);"+
      "}"
    var fragmentCode = 
      "void main(void){"+
      "gl_FragColor = vec4(0.0, 0.0, 1.0, 1);"+
      "}"
    
    var vertex_buffer = gl.createBuffer()
    var vertexShader = gl.createShader(gl.VERTEX_SHADER)
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)
    // 3. create and compile shaders
    gl.shaderSource(vertexShader,vertexCode)
    gl.shaderSource(fragmentShader,fragmentCode)
    
    gl.compileShader(vertexShader)   
    if(!gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS)){
      console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(vertexShader))
    }  
    gl.compileShader(fragmentShader)   
    if(!gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS)){
      console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(fragmentShader))
    }                      
    
    var shaderProgram = gl.createProgram()
    gl.attachShader(shaderProgram,vertexShader)
    gl.attachShader(shaderProgram,fragmentShader)
    gl.linkProgram(shaderProgram)   
    if(!gl.getProgramParameter(shaderProgram,gl.LINK_STATUS)){
      console.log('GPU Program failed to compile: ' + gl.getProgramInfoLog(shaderProgram))
    }  
    gl.useProgram(shaderProgram)
    // 4. associate shaders with buffers
    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer)
    gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(vertices),gl.STATIC_DRAW)
    var coord = gl.getAttribLocation(shaderProgram,"coordinates")
    gl.vertexAttribPointer(coord,2,gl.FLOAT,false,0,0)
    gl.enableVertexAttribArray(coord)
    // 5. draw the object 
    function callback(){
      var elapsed = new Date().getTime() 
      gl.clearColor(0.13,0.13,0.13,1)
      gl.enable(gl.DEPTH_TEST)
      gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT)
      gl.viewport(0,0,canvas_element.width,canvas_element.height)
      gl.drawArrays(gl.TRIANGLES,0,3)
      fps_relay.textContent = ((new Date().getTime()-elapsed)/2)
    }
    setInterval(callback,1) 
  }
  else{
    Error("Browser does not support WebGL")
  }
}

main() 

</script>
</footer>
</html>